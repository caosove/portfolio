package product;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class ProductDAO extends JdbcDAO {
	private static ProductDAO _dao;
	
	public ProductDAO() {
		// TODO Auto-generated constructor stub
	}	
	static {
		_dao = new ProductDAO();
	}	
	public static ProductDAO getDAO() {
		return _dao;
	}
	
	//상품 등록
	public int addProdType(ProductDTO product) {
		Connection con = null;
		PreparedStatement pstmt = null;
		int rows = 0;	
		try {			
			con = getConnection();			
			
			String sql="insert into product_shopping values(";
			if (product.getpType().equals("BED")) {
				sql += "seq_pType01.nextval";
		   	} else if (product.getpType().equals("LIVING")) {
		   		sql += "seq_pType02.nextval";
		   	} else if (product.getpType().equals("KITCHEN")) {
		   		sql += "seq_pType03.nextval";
		   	} else if (product.getpType().equals("TEXTILE")) {
		   		sql += "seq_pType04.nextval";
		   	}
			
			sql += ",?,?,?,?,?,100,sysdate,?,?)";
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, product.getpType());
			pstmt.setString(2, product.getpName());
			pstmt.setString(3, product.getpCategory());
			pstmt.setString(4, product.getpExp());
			pstmt.setInt(5, product.getpPrice());
			pstmt.setString(6, product.getpImage());
			pstmt.setString(7, product.getpStatus());
			rows = pstmt.executeUpdate();	
		} catch (SQLException e) {
			System.out.println("[에러] addProdType() 메소드의 SQL 오류 : " + e.getMessage());
		} finally {
			close(con, pstmt);
		}		
		return rows;
	}  
	
	//상품리스트 검색 : 시작 행번호와 마지막 행번호를 전달받아 쇼핑몰 메뉴와 상품리스트 검색 항목별 
	//검색 행번호(ROWNUM)와 비교 검색하여 반환하는 메소드
	public List<ProductDTO> getProductList2(int startRow,int endRow, String menu, String sorting) {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		List<ProductDTO> productList = new ArrayList<>();
		System.out.println("getProductList2, " + menu  + ", " + sorting + ", " + startRow + ", " + endRow);
		
		try {
			con = getConnection();
			String sql="select * from (select rownum rn,temp.* from (";			
			
			if(menu.equals("BED")){
				sql += "select * from product_bed order by " + sorting + " ) temp) where rn between ? and ?";
				pstmt = con.prepareStatement(sql);
				pstmt.setInt(1, startRow);
				pstmt.setInt(2, endRow);
			} else if (menu.equals("LIVING")){
				sql += "select * from product_living order by " + sorting + " ) temp) where rn between ? and ?";
				pstmt = con.prepareStatement(sql);
				pstmt.setInt(1, startRow);
				pstmt.setInt(2, endRow);
			} else if (menu.equals("KITCHEN")){
				sql += "select * from product_kitchen order by " + sorting + " ) temp) where rn between ? and ?";
				pstmt = con.prepareStatement(sql);
				pstmt.setInt(1, startRow);
				pstmt.setInt(2, endRow);
			} else if (menu.equals("TEXTILE")){
				sql += "select * from product_textile order by " + sorting + " ) temp) where rn between ? and ?";
				pstmt = con.prepareStatement(sql);
				pstmt.setInt(1, startRow);
				pstmt.setInt(2, endRow);
			} else if (menu.equals("NEW")){
				sql +="select * from product_shopping order by " + sorting + " desc) temp) where rn between ? and ?";				
				pstmt = con.prepareStatement(sql);
				pstmt.setInt(1, startRow);
				pstmt.setInt(2, endRow);
			} else if (menu.equals("ALL")){
				sql +="select * from product_shopping order by " + sorting + " desc) temp) where rn between ? and ?";				
				pstmt = con.prepareStatement(sql);
				pstmt.setInt(1, startRow);
				pstmt.setInt(2, endRow);
			}
			
			rs = pstmt.executeQuery();
			while (rs.next()) {
				ProductDTO product = new ProductDTO();
				product.setpID(rs.getInt("p_ID"));
				product.setpType(rs.getString("p_Type"));
				product.setpName(rs.getString("p_Name"));
				product.setpCategory(rs.getString("p_Category"));
				product.setpExp(rs.getString("p_Exp"));
				product.setpPrice(rs.getInt("p_Price"));
				product.setpInv(rs.getInt("p_Inv"));
				product.setpDate(rs.getString("p_Date"));
				product.setpImage(rs.getString("p_Image"));
				product.setpStatus(rs.getString("p_Status"));				
				productList.add(product);
			}			
		} catch (SQLException e) {
			System.out.println("[에러] getProductList2() 메소드의 SQL 오류 : " + e.getMessage());
		} finally {
			close(con, pstmt, rs);
		}		
		return productList;
	}
	
	
	//제품코드를 전달받아 PRODUCT 테이블의 저장 유무를 검색하여 반환하는 메소드
	// => 미검색 : false 반환, 검색 : true 반환
	public boolean isProduct(int pID) {
		Connection con=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		boolean result=false;
		try {
			con=getConnection();			
			String sql = "select * from product_shopping where P_ID=?";
			pstmt=con.prepareStatement(sql);
			pstmt.setInt(1, pID);			
			rs=pstmt.executeQuery();
			
			result=rs.next();
		} catch (SQLException e) {
			System.out.println("[에러]isProduct() 메소드의 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt, rs);
		}
		return result;
	}
	
	//제품 검색(아이디)
	public ProductDTO getProduct(int pID) {
		System.out.println("getProduct");
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ProductDTO product = new ProductDTO();
		try {
			con = getConnection();
			String sql = "select * from product_shopping where P_ID=?";
			pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, pID);
			rs = pstmt.executeQuery();
			
			while(rs.next()) {
				product.setpID(rs.getInt("p_ID"));
				product.setpType(rs.getString("p_Type"));
				product.setpName(rs.getString("p_Name"));
				product.setpCategory(rs.getString("p_Category"));
				product.setpExp(rs.getString("p_Exp"));
				product.setpPrice(rs.getInt("p_Price"));
				product.setpInv(rs.getInt("p_Inv"));
				product.setpDate(rs.getString("p_Date").substring(0,10));
				product.setpImage(rs.getString("p_Image"));
				product.setpStatus(rs.getString("p_Status"));
				System.out.println(rs.getString("p_Status"));
			}			
		} catch (SQLException e) {
			System.out.println("[에러]getProduct() 메소드의 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt, rs);
		}		
		return product;
	}
	
	//제품 정보 수정
	public int modifyProduct(ProductDTO product) {
		Connection con = null;
		PreparedStatement pstmt = null;
		int rows = 0;
		try {
			con = getConnection();
			String sql = "update product_shopping set P_NAME=?,P_CATEGORY=?"
					+ ",P_EXP=?,P_PRICE=?,P_INV=?,P_IMAGE=?,P_STATUS=? where P_ID=?";
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, product.getpName());
			pstmt.setString(2, product.getpCategory());
			pstmt.setString(3, product.getpExp());
			pstmt.setInt(4, product.getpPrice());
			pstmt.setInt(5, product.getpInv());
			pstmt.setString(6, product.getpImage());
			pstmt.setString(7, product.getpStatus());
			pstmt.setInt(8, product.getpID());
			
			rows = pstmt.executeUpdate();		
		} catch (SQLException e) {
			System.out.println("[에러]modifyProduct() 메소드의 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt);
		}
		return rows;
	}
	
	//제품 삭제 (아이디)
	public int removeProduct(int pID) {
		Connection con = null;
		PreparedStatement pstmt = null;
		int rows = 0;
		try {
			con = getConnection();
			String sql = "delete from product_shopping where P_ID=?";
			pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, pID);
			rows = pstmt.executeUpdate();
		} catch (SQLException e) {
			System.out.println("[에러]removeProduct() 메소드의 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt);
		}
		return rows;
	}
	
	//메뉴와 검색조건에 따라 검색된 제품의 갯수 반환
	public int getTotalProduct(String menu, String sorting) {
		int rows = 0;
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try {
			con = getConnection();
			if(menu.equals("BED")) {
				String sql ="select count(*) from product_bed order by " + sorting;
				pstmt = con.prepareStatement(sql);
			} else if (menu.equals("LIVING")) {
				String sql = "select count(*) from product_living order by " + sorting;
				pstmt = con.prepareStatement(sql);
			} else if (menu.equals("KITCHEN")) {
				String sql = "select count(*) from product_kitchen order by " + sorting;
				pstmt = con.prepareStatement(sql);
			} else if (menu.equals("TEXTILE")) {
				String sql ="select count(*) from product_textile order by " + sorting;
				pstmt = con.prepareStatement(sql);
			} else if (menu.equals("NEW")) {
				String sql ="select count(*) from product_shopping order by " + sorting;
				pstmt = con.prepareStatement(sql);
			} else if (menu.equals("ALL")) {
				String sql ="select count(*) from product_shopping order by " + sorting;
				pstmt = con.prepareStatement(sql);
			}
			
			rs = pstmt.executeQuery();			
			if (rs.next()) {
				rows = rs.getInt(1);
			}
		} catch (SQLException e) {
			System.out.println("[에러] getTotalProduct() 메소드 오류 : " + e.getMessage());
		} finally {
			close(con, pstmt, rs);
		}
		
		return rows;
	}
	

	//////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////This1 추가 메소드 시작/////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////
	public int getTotalProduct2(String search,String keyword) {
		Connection con=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		int rows=0;
		try {
			con=getConnection();
			
			//파라메터에 전달된 값에 따라 다른 SQL 명령을 PreparedStatement
			//인스턴스에 저장하여 전달하여 실해되도록 작성 - 동적 SQL
			if(search.equals("")) {
				String sql="select count(*) from product_shopping";
				pstmt=con.prepareStatement(sql);
			} else {
				String sql="select count(*) from product_shopping where "+search+" like '%'||?||'%' and p_status!='stop'";
				pstmt=con.prepareStatement(sql);
				pstmt.setString(1, keyword);
			}
				
			rs=pstmt.executeQuery();
				
			if(rs.next()) {
				rows=rs.getInt(1);
			}
		} catch (SQLException e) {
			System.out.println("[에러]getTotalProduct2() 메소드의 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt, rs);
		}
			return rows;
	}
	
	public List<ProductDTO> getProductList(int startRow,int endRow,String search,String keyword){
		Connection con=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		List<ProductDTO> productList=new ArrayList<ProductDTO>();
		try {
			con=getConnection();
	
			if(search.equals("")) {
				String sql="select * from (select rownum rn,temp.* from ("
						+ "select * from product_shopping where p_status!='stop') temp"
						+ ") where rn between ? and ?";
				pstmt=con.prepareStatement(sql);
				pstmt.setInt(1, startRow);
				pstmt.setInt(2, endRow);	
			} else {
				String sql="select * from (select rownum rn,temp.* from ("
						+ "select * from product_shopping where "+search+" like "
						+ "'%'||?||'%' and p_status!='stop'"
						+ ") temp) where rn between ? and ?";
				pstmt=con.prepareStatement(sql);
				pstmt.setString(1, keyword);
				pstmt.setInt(2, startRow);
				pstmt.setInt(3, endRow);
			}
	
			rs=pstmt.executeQuery();
	
			while(rs.next()) {
				ProductDTO product = new ProductDTO();
				product.setpID(rs.getInt("p_ID"));
				product.setpType(rs.getString("p_Type"));
				product.setpName(rs.getString("p_Name"));
				product.setpCategory(rs.getString("p_Category"));
				product.setpExp(rs.getString("p_Exp"));
				product.setpPrice(rs.getInt("p_Price"));
				product.setpInv(rs.getInt("p_Inv"));
				product.setpDate(rs.getString("p_Date").substring(0,10));
				product.setpImage(rs.getString("p_Image"));
				product.setpStatus(rs.getString("p_Status"));
	
				productList.add(product);
				} 
			} catch (SQLException e) {
				System.out.println("[에러]getProductList() 메소드 SQL 오류 = "+e.getMessage());
			} finally {
				close(con, pstmt, rs);
			}
				return productList;
		}
	//////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////This1- 추가 메소드 종료/////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////
}
