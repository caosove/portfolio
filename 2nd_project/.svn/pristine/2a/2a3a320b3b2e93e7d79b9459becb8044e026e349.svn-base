package StockList;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class StockListDAO extends JdbcDAO{
	private static StockListDAO _dao;
	
	private StockListDAO() {
		// TODO Auto-generated constructor stub
	}
	
	static {
		_dao=new StockListDAO();
	}
	
	public static StockListDAO getDAO() {
		return _dao;
	}
	
	public List<StockListDTO>  getArticles(String grade, String id) throws Exception {
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		List<StockListDTO> articleList = null;
		articleList = new ArrayList<StockListDTO>();
		try {
			conn = getConnection();
			
			if(grade.equals("admin")) {
				pstmt = conn.prepareStatement("select * from stock_list");
			
			}else if(grade.equals("user")){
				pstmt = conn.prepareStatement("select * from stock_list where s_uname = ?");
				pstmt.setString(1, id);
			}
			rs = pstmt.executeQuery();
			while(rs.next()) {
					StockListDTO article = new StockListDTO();
					article.setNum(rs.getInt("s_num"));
					article.setUname(rs.getString("s_uname"));
					article.setPname(rs.getString("s_pname"));
					article.setPrice(rs.getInt("s_price"));
					article.setCredit(rs.getInt("s_credit"));
					article.setCount(rs.getInt("s_count"));
					article.setDate(rs.getString("s_date"));
					article.setAddress(rs.getString("s_address"));
					article.setPay(rs.getString("s_pay"));
					articleList.add(article);
				} 
			System.out.println(articleList.size());
		} catch (Exception ex) {
			ex.printStackTrace();
		} finally {
			close(conn, pstmt, rs);
		}
		return articleList;
	}

	public List<StockListDTO>  checkList(String grade, String id) throws Exception {
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		List<StockListDTO> articleList = null;
		articleList = new ArrayList<StockListDTO>();
		
		System.out.println(id + grade);
		try {
			conn = getConnection();
			
			if(grade.equals("admin")) {
				pstmt = conn.prepareStatement("select * from stock_list where s_pay = 'y'");
			
			}else if(grade.equals("user")){
				pstmt = conn.prepareStatement("select * from stock_list s where s_uname = ? and s_pay = 'y'");
				pstmt.setString(1, id);
			}
			rs = pstmt.executeQuery();
			while(rs.next()) {
					StockListDTO article = new StockListDTO();
					article.setNum(rs.getInt("s_num"));
					article.setUname(rs.getString("s_uname"));
					article.setPname(rs.getString("s_pname"));
					article.setPrice(rs.getInt("s_price"));
					article.setCredit(rs.getInt("s_credit"));
					article.setCount(rs.getInt("s_count"));
					article.setDate(rs.getString("s_date"));
					article.setAddress(rs.getString("s_address"));
					article.setPay(rs.getString("s_pay"));
					articleList.add(article);
				} 
			System.out.println(articleList.size());
		} catch (Exception ex) {
			ex.printStackTrace();
		} finally {
			close(conn, pstmt, rs);
		}
		return articleList;
	}
	
	public List<StockListDTO> getStockList(int startRow,int endRow,String search,String keyword){
		Connection con=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		List<StockListDTO> stockList=new ArrayList<StockListDTO>();
		try {
			con=getConnection();
			
			if(search.equals("")) {
				String sql="select * from (select rownum rn,temp.* from ("
						+ "select * from Stock_List where s_pay='y') temp"
						+ ") where rn between ? and ?";
				pstmt=con.prepareStatement(sql);
				pstmt.setInt(1, startRow);
				pstmt.setInt(2, endRow);	
			} else {
				String sql="select * from (select rownum rn,temp.* from ("
						+ "select * from Stock_List where "+search+" like "
						+ "'%'||?||'%' and s_pay='y'"
						+ ") temp) where rn between ? and ?";
				pstmt=con.prepareStatement(sql);
				pstmt.setString(1, keyword);
				pstmt.setInt(2, startRow);
				pstmt.setInt(3, endRow);
			}
			
			rs=pstmt.executeQuery();

			while(rs.next()) {
				StockListDTO article = new StockListDTO();
				article.setNum(rs.getInt("s_num"));
				article.setUname(rs.getString("s_uname"));
				article.setPname(rs.getString("s_pname"));
				article.setPrice(rs.getInt("s_price"));
				article.setCredit(rs.getInt("s_credit"));
				article.setCount(rs.getInt("s_count"));
				article.setDate(rs.getString("s_date"));
				article.setAddress(rs.getString("s_address"));
				article.setPay(rs.getString("s_pay"));
				stockList.add(article);
			} 
		} catch (SQLException e) {
			System.out.println("[에러]getStockList() 메소드 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt, rs);
		}
		return stockList;
	}
	
	public int getTotalStock(String search,String keyword) {
		Connection con=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		int rows=0;
		try {
			con=getConnection();
			
			//파라메터에 전달된 값에 따라 다른 SQL 명령을 PreparedStatement
			//인스턴스에 저장하여 전달하여 실해되도록 작성 - 동적 SQL
			if(search.equals("")) {
				String sql="select count(*) from Stock_List where s_pay='y'";
				pstmt=con.prepareStatement(sql);
			} else {
				String sql="select count(*) from Stock_List where "+search+" like '%'||?||'%' and s_pay='y'";
				pstmt=con.prepareStatement(sql);
				pstmt.setString(1, keyword);
			}
			
			rs=pstmt.executeQuery();
			
			if(rs.next()) {
				rows=rs.getInt(1);
			}
		} catch (SQLException e) {
			System.out.println("[에러]getTotalStock() 메소드의 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt, rs);
		}
		return rows;
	}
}
