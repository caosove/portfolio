package user;


import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UserDAO extends JdbcDAO{
	private static UserDAO _dao;
	
	private UserDAO() {
		// TODO Auto-generated constructor stub
	}
	
	static {
		_dao=new UserDAO();
	}
	
	public static UserDAO getDAO() {
		return _dao;
	}
	
	//회원 추가 (회원가입)
	public int addUser(UserDTO user) {
		Connection con=null;
		PreparedStatement pstmt=null;
		int rows=0;
		
		try {
			con=getConnection();
			String sql="insert into users values(?,?,?,?,?,?,?,?,'user',sysdate,user_seq.nextval,null)";
			pstmt=con.prepareStatement(sql);
			pstmt.setString(1, user.getuId());
			pstmt.setString(2, user.getuPwd());
			pstmt.setString(3, user.getuName());
			pstmt.setString(4, user.getuEmail());
			pstmt.setString(5, user.getuPost());
			pstmt.setString(6, user.getuAbasic());
			pstmt.setString(7, user.getuAdetail());
			pstmt.setString(8, user.getuPhone());
			
			rows=pstmt.executeUpdate();
		}catch(SQLException e) {
			System.out.println("addUser()메소드 SQL오류 = "+e.getMessage());
		}finally {
			close(con, pstmt);
		}
		return rows;
	}
	
	//회원 정보 가져오기
	public UserDTO getUser(String id) {
		Connection con=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		UserDTO user=null;
		try {
			con=getConnection();
			String sql="select * from users where u_id=?";
			pstmt=con.prepareStatement(sql);
			pstmt.setString(1, id);
			rs=pstmt.executeQuery();
			
			if(rs.next()) {
				user=new UserDTO();
				user.setuId(rs.getString("u_id"));
				user.setuPwd(rs.getString("u_pwd"));
				user.setuName(rs.getString("u_name"));
				user.setuPhone(rs.getString("u_phone"));
				user.setuJoindate(rs.getString("u_joindate"));
				user.setuEmail(rs.getString("u_email"));
				user.setuPost(rs.getString("u_post"));
				user.setuAbasic(rs.getString("u_abasic"));
				user.setuAdetail(rs.getString("u_adetail"));
				user.setuGrade(rs.getString("u_grade"));
			}
			
		} catch(SQLException e) {
			System.out.println("getUser() 메소드 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt, rs);
		}
		return user;
	}
	
	//중복 ID 체크 및 회원등급 검사(회원등급 반환)
	public String checkUserId(String id) {
		Connection con=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		String grade="";
		try {
			con=getConnection();
			String sql="select u_grade from users where u_id=?";
			pstmt=con.prepareStatement(sql);
			pstmt.setString(1, id);
			rs=pstmt.executeQuery();
			
			if(rs.next()) {
				grade=rs.getString(1);
			}
			
		} catch(SQLException e) {
			System.out.println("checkUserId() 메소드 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt, rs);
		}
		if(grade==null) grade="";
		return grade;
	}
	
	//회원 정보 수정
	public int modifyUser(UserDTO user) {
		Connection con=null;
		PreparedStatement pstmt=null;
		int rows=0;
		
		try {
			con=getConnection();
			String sql="update users set u_pwd=?,u_name=?,u_email=?,u_post=?,u_abasic=?,u_adetail=?,u_phone=? where u_id=?";
			pstmt=con.prepareStatement(sql);
			pstmt.setString(1, user.getuPwd());
			pstmt.setString(2, user.getuName());
			pstmt.setString(3, user.getuEmail());
			pstmt.setString(4, user.getuPost());
			pstmt.setString(5, user.getuAbasic());
			pstmt.setString(6, user.getuAdetail());
			pstmt.setString(7, user.getuPhone());
			pstmt.setString(8, user.getuId());
			
			rows=pstmt.executeUpdate();
		} catch(SQLException e) {
			System.out.println("modifyUser() 메소드 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt);
		}
		return rows;
	}
		
	//권한변경(탈퇴/비번 변경)
	public int modifyUserGrade(String uId,String grade) {
		Connection con=null;
		PreparedStatement pstmt=null;
		int rows=0;
		
		try {
			con=getConnection();
			String sql="";
			if(grade.equals("leave")) {
				sql="update users set u_grade='leave', u_dropdate=sysdate where u_id=?";
				pstmt=con.prepareStatement(sql);
				pstmt.setString(1, uId);
			} else {
				sql="update users set u_grade=? where u_id=?";
				pstmt=con.prepareStatement(sql);
				pstmt.setString(1, grade);
				pstmt.setString(2, uId);
			}
			rows=pstmt.executeUpdate();
			
		} catch(SQLException e) {
			System.out.println("modifyUserGrade() 메소드 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt);
		}
		return rows;
	}
	
	//아이디 찾기
	public String lookupId(String uName, String uPhone, String uId) {
		Connection con=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		String id="";
		try {
			con=getConnection();
			if(uId.equals("")) {
				String sql="select U_ID from users where u_name=? and u_phone=?";
				pstmt=con.prepareStatement(sql);
				pstmt.setString(1, uName);
				pstmt.setString(2, uPhone);
			} else if(!uId.equals("")) {
				String sql="select U_ID from users where u_name=? and u_phone=? and u_id=?";
				pstmt=con.prepareStatement(sql);
				pstmt.setString(1, uName);
				pstmt.setString(2, uPhone);
				pstmt.setString(3, uId);
			}
			rs=pstmt.executeQuery();
			if(rs.next()) {
				if(rs.getString(1)!=null) id=rs.getString(1);
			} 
		} catch (SQLException e) {
			System.out.println("discoverId() 메소드 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt, rs);
		}
		return id;
	}
		
	//등급값이 leave(탈퇴)인 유저를 제외한 모든 유저 반환
	public List<UserDTO> getUserList(int startRow,int endRow,String search,String keyword){
		Connection con=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		List<UserDTO> userList=new ArrayList<UserDTO>();
		try {
			con=getConnection();
			
			if(search.equals("")) {
				String sql="select * from (select rownum rn,temp.* from ("
						+ "select * from users where u_grade!='leave') temp"
						+ ") where rn between ? and ?";
				pstmt=con.prepareStatement(sql);
				pstmt.setInt(1, startRow);
				pstmt.setInt(2, endRow);	
			} else {
				String sql="select * from (select rownum rn,temp.* from ("
						+ "select * from users where "+search+" like "
						+ "'%'||?||'%' and u_grade!='leave'"
						+ ") temp) where rn between ? and ?";
				pstmt=con.prepareStatement(sql);
				pstmt.setString(1, keyword);
				pstmt.setInt(2, startRow);
				pstmt.setInt(3, endRow);
			}
			
			rs=pstmt.executeQuery();

			while(rs.next()) {
				UserDTO user=new UserDTO();
				user.setuId(rs.getString("u_id"));
				user.setuPwd(rs.getString("u_pwd"));
				user.setuName(rs.getString("u_name"));
				user.setuPhone(rs.getString("u_phone"));
				user.setuJoindate(rs.getString("u_joindate"));
				user.setuEmail(rs.getString("u_email"));
				user.setuPost(rs.getString("u_post"));
				user.setuAbasic(rs.getString("u_abasic"));
				user.setuAdetail(rs.getString("u_adetail"));
				user.setuGrade(rs.getString("u_grade"));

				
				userList.add(user);
			}
		} catch (SQLException e) {
			System.out.println("[에러]getUserList() 메소드 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt, rs);
		}
		return userList;
	}
	//데이터를 완전히 삭제하는 메소드
	public int removeUser(String uId) {
		Connection con=null;
		PreparedStatement pstmt=null;
		int rows=0;
		try {
			con=getConnection();
			
			String sql="delete from users where u_id=?";
			pstmt=con.prepareStatement(sql);
			pstmt.setString(1, uId);
			
			rows=pstmt.executeUpdate();
		} catch (SQLException e) {
			System.out.println("[에러]removeMember() 메소드의 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt);
		}
		return rows;
	}

	//탈퇴한 모든 유저를 반환
	public List<UserDTO> getLeaveUserList(){
		Connection con=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		List<UserDTO> userList=new ArrayList<UserDTO>();
		try {
			con=getConnection();
			
			String sql="select * from users where u_grade='leave'";
			pstmt=con.prepareStatement(sql);
			
			rs=pstmt.executeQuery();
			
			while(rs.next()) {
				UserDTO user=new UserDTO();
				user.setuId(rs.getString("u_id"));
				user.setuPwd(rs.getString("u_pwd"));
				user.setuName(rs.getString("u_name"));
				user.setuPhone(rs.getString("u_phone"));
				user.setuJoindate(rs.getString("u_joindate"));
				user.setuEmail(rs.getString("u_email"));
				user.setuPost(rs.getString("u_post"));
				user.setuAbasic(rs.getString("u_abasic"));
				user.setuAdetail(rs.getString("u_adetail"));
				user.setuGrade(rs.getString("u_grade"));

				
				userList.add(user);
			}
		} catch (SQLException e) {
			System.out.println("[에러]getLeaveUserList() 메소드 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt, rs);
		}
		return userList;
	}
	
	//검색메뉴와 키워드를 전달받아 user 테이블에 저장된 검색 게시글의 갯수를 검색하여 반환하는 메소드
	//=> 전달된 검색메뉴가 없다면 user 테이블에 저장된 전체 게시글의 갯수를 검색하여 반환하는 메소드
	public int getTotalUser(String search,String keyword) {
		Connection con=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		int rows=0;
		try {
			con=getConnection();
			
			//파라메터에 전달된 값에 따라 다른 SQL 명령을 PreparedStatement
			//인스턴스에 저장하여 전달하여 실해되도록 작성 - 동적 SQL
			if(search.equals("")) {
				String sql="select count(*) from users where u_grade!='leave'";
				pstmt=con.prepareStatement(sql);
			} else {
				String sql="select count(*) from users where "+search+" like '%'||?||'%' and u_grade!='leave'";
				pstmt=con.prepareStatement(sql);
				pstmt.setString(1, keyword);
			}
			
			rs=pstmt.executeQuery();
			
			if(rs.next()) {
				rows=rs.getInt(1);
			}
		} catch (SQLException e) {
			System.out.println("[에러]getTotalUser() 메소드의 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt, rs);
		}
		return rows;
	}
	
	//user_SEQ 객체의 다음값을 검색하여 반환하는 메소드
	public int getUserNum() {
		Connection con=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		int num=0;
		try {
			con=getConnection();
			
			String sql="select u_seq.nextval from dual";
			pstmt=con.prepareStatement(sql);
			
			rs=pstmt.executeQuery();
			
			if(rs.next()) {
				num=rs.getInt(1);
			}
		} catch (SQLException e) {
			System.out.println("[에러]getUserNum() 메소드의 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt, rs);
		}
		return num;
	}
}
